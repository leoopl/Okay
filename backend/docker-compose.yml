networks:
  okay_network:
    driver: bridge

services:
  postgres:
    networks:
      - okay_network
    image: postgres:latest
    container_name: okay-api-db
    environment:
      POSTGRES_NAME: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME} -d ${DB_NAME} -h localhost']
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    networks:
      - okay_network
    image: node:20.18-slim
    container_name: okay_api
    working_dir: /usr/src/app
    environment:
      # Application settings
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      FRONTEND_URL: ${FRONTEND_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}

      # Database settings
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_LOGGING: ${DB_LOGGING}

      # Security settings
      COOKIE_SECRET: ${COOKIE_SECRET}
      SECURE_COOKIES: ${SECURE_COOKIES}
      COOKIE_DOMAIN: ${COOKIE_DOMAIN}
      THROTTLE_TTL: ${THROTTLE_TTL}
      THROTTLE_LIMIT: ${THROTTLE_LIMIT}

      # JWT/OAuth configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      JWT_ISSUER: ${JWT_ISSUER}
      AUTH_CODE_EXPIRATION: ${AUTH_CODE_EXPIRATION}
      OAUTH_CLIENT_IDS: ${OAUTH_CLIENT_IDS}

      # Encryption settings
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      ENCRYPTION_SALT: ${ENCRYPTION_SALT}

      # Role settings
      DEFAULT_USER_ROLE: ${DEFAULT_USER_ROLE}
    env_file:
      - .env
    volumes:
      - ./:/usr/src/app
      - /app/node_modules
    command: ['npm', 'run', 'start:dev']
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
